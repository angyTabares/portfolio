---
import Link from "../icons/Link.astro";


const PROJECTS = [
    {
    title: "Oliva",
    description:
      "Oliva is a web application where users can discover or strengthen their relationship with God through writings, reflections, and Bible verses in an accessible way. The app also includes an admin panel with CRUD functionality to the different sections.",
    link: "https://oliva-de-vida.web.app/",
    image: "/projectsImages/oliva.webp",
    tags: ["REACT", "JAVASCRIPT", "FIREBASE","TAILWIND"],
  },
  {
    title: "Calendar",
    description:
      "Web application built with the MERN stack designed to help organize activities in a simple and efficient way, providing an intuitive and real-time experience within an interactive calendar.",
    link: "https://calendarappc.netlify.app/",
    image: "/projectsImages/calendar.webp",
    tags: ["REACT", "EXPRESS.JS", "NODE.JS","MONGODB"],
  },
  {
    title: "Huellitas",
    description:
      "Huellitas is a web application built with React, Redux, and Firebase for a pet products store. It features a complete purchasing flow for users and an admin panel with CRUD functionality, showcasing efficient state management and real-time integration",
    link: "https://huellitas-e564f.web.app/",
    image: "/projectsImages/huellitas.webp",
    tags: ["REACT", "REDUX", "FIREBASE"],
  },
  {
    title: "Amor y Vida App",
    description:
      "Web application built with React, Redux, and Firestore for managing a youth group within an institution. It enables efficient administration of activities, members, and key data, leveraging advanced state management and real-time database capabilities.",
    link: "https://amor-y-vida-2972d.web.app/app",
    image: "/projectsImages/amoryvida.webp",
    tags: ["REACT", "REDUX", "FIREBASE"],
  },
  {
    title: "Amazon clon",
    description:
      "This Amazon clone is a web application built with the MERN stack (MongoDB, Express, React, Node.js). It features a complete purchasing flow, payment gateway integration, and an order history, showcasing a modern architecture and essential functionalities for an online store",
    link: "https://amazon-clon.onrender.com/",
    image: "/projectsImages/amazonclon.webp",
    tags: ["REACT", "NODE.JS", "MONGO DB", "EXPRESS"],
  },
  {
    title: "Smart Bunny",
    description:
      "Smart Bunny is an educational game developed in pure JavaScript (Vanilla JS) to promote computational thinking in children. Designed to be interactive and accessible, the game introduces fundamental logic and problem-solving concepts through engaging and fun activities.",
    link: "https://analisis-proyecto.web.app/index.html",
    image: "/projectsImages/smartbunny.webp",
    tags: ["JAVASCRIPT", "FIREBASE"],
  },
];

const totalCards = PROJECTS.length;
---

<style>
  .projects-container {
    position: relative;
    width: 100%;
    overflow: hidden;
    padding: 0 3rem;
  }
  
  .projects-row {
    display: flex;
    transition: transform 0.3s ease;
    gap: 1.5rem;
  }
  
  .project-card {
    flex: 0 0 calc(50% - 0.75rem);
    background: linear-gradient(to right, rgba(240, 171, 252, 0.1), rgba(192, 132, 252, 0.3));
    border-radius: 1rem;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    min-height: 420px;
    display: flex;
    flex-direction: column;
    transition: box-shadow 0.3s ease;
  }
  
  .project-card:hover {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  }
  
  .project-image {
    position: relative;
    height: 12rem;
    overflow: hidden;
  }
  
  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }
  
  .project-card:hover .project-image img {
    transform: scale(1.05);
  }
  
  .project-content {
    padding: 1rem;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    justify-content: space-between;
  }
  
  .project-title {
    font-size: 1.125rem;
    font-weight: bold;
    color: white;
    margin-bottom: 0.5rem;
  }
  
  .project-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
  }
  
  .project-tag {
    border-radius: 9999px;
    font-size: 0.75rem;
    background-color: rgb(121, 117, 165);
    color: white;
    padding: 0.25rem 0.5rem;
  }
  
  .project-description {
    font-size: 0.875rem;
    color: rgba(254, 254, 255, 0.8);
    line-height: 1.5;
  }
  
  .project-link {
    margin-top: 0.75rem;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    border-radius: 0.5rem;
    background-color: #d946ef;
    color: white;
    font-size: 0.875rem;
    font-weight: 500;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease;
  }
  
  .project-link:hover {
    background-color: #c026d3;
  }
  
  .carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 20;
    background-color: #d946ef;
    color: white;
    padding: 0.75rem;
    border-radius: 9999px;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
  }
  
  .carousel-button:hover {
    background-color: #c026d3;
    transform: translateY(-50%) scale(1.1);
  }
  
  .carousel-button.disabled {
    background-color: #9ca3af;
    cursor: not-allowed;
    transform: translateY(-50%);
  }
  
  .carousel-button.disabled:hover {
    background-color: #9ca3af;
    transform: translateY(-50%);
  }
  
  .carousel-button.prev {
    left: 0.5rem;
  }
  
  .carousel-button.next {
    right: 0.5rem;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .projects-container {
      padding: 0 2.5rem;
    }
    
    .project-card {
      flex: 0 0 100%;
    }
    
    .carousel-button {
      width: 2.5rem;
      height: 2.5rem;
    }
    
    .carousel-button.prev {
      left: 0.25rem;
    }
    
    .carousel-button.next {
      right: 0.25rem;
    }
  }

  @media (max-width: 480px) {
    .projects-container {
      padding: 0 2rem;
    }
    
    .carousel-button {
      width: 2rem;
      height: 2rem;
      padding: 0.5rem;
    }
  }
</style>


  <div class="projects-container" data-total-cards={totalCards}>
    <!-- Botón Izquierdo -->
    <button 
      class="carousel-button prev disabled"
      id="prevButton"
      aria-label="Previous projects"
    >
      ‹
    </button>
    
    <!-- Contenedor de tarjetas -->
    <div class="projects-row" id="projectsRow">
      {PROJECTS.map(({ image, title, description, tags, link }) => (
        <article class="project-card">
          <!-- Imagen -->
          <div class="project-image">
            <img
              src={image}
              alt={`Screenshot of ${title} project`}
            />
          </div>
          
          <!-- Contenido -->
          <div class="project-content">
            <div>
              <h3 class="project-title">{title}</h3>
              <ul class="project-tags">
                {tags.map((tag) => (
                  <li>
                    <span class="project-tag">
                      {tag}
                    </span>
                  </li>
                ))}
              </ul>
              <p class="project-description">{description}</p>
            </div>
            
            {link && (
              <a
                target="_blank"
                href={link}
                class="project-link"
              >
                <Link />
                Preview
              </a>
            )}
          </div>
        </article>
      ))}
    </div>
    
    <!-- Botón Derecho -->
    <button 
      class="carousel-button next"
      id="nextButton"
      aria-label="Next projects"
    >
      ›
    </button>
  </div>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Obtener elementos del DOM con verificaciones de null
    const projectsContainer = document.querySelector('.projects-container');
    const projectsRow = document.getElementById('projectsRow');
    const prevButton = document.getElementById('prevButton');
    const nextButton = document.getElementById('nextButton');
    
    if (!projectsContainer || !projectsRow || !prevButton || !nextButton) {
      console.error('No se pudieron encontrar todos los elementos necesarios para el carrusel');
      return;
    }
    
    const totalCards = parseInt(projectsContainer.getAttribute('data-total-cards') || '4');
    const visibleCards = window.innerWidth <= 768 ? 1 : 2;
    let currentIndex = 0;
    
    // Calcular el número máximo de índices
    const maxIndex = Math.ceil(totalCards / visibleCards) - 1;
    
    // Función para actualizar el carrusel
    function updateCarousel() {
      const firstCard = document.querySelector('.project-card');
      if (!firstCard) return;
      
      // Calcular el desplazamiento usando getBoundingClientRect()
      const cardRect = firstCard.getBoundingClientRect();
      const gap = 24;
      const cardWidth = cardRect.width + gap;
      
      // Calcular el desplazamiento
      const translateX = -currentIndex * cardWidth * visibleCards;
      if(projectsRow)
      projectsRow.style.transform = `translateX(${translateX}px)`;
      
      // Actualizar estado de botones usando classList en lugar de la propiedad disabled
      if (currentIndex === 0) {
        prevButton?.classList.add('disabled');
      } else {
        prevButton?.classList.remove('disabled');
      }
      
      if (currentIndex >= maxIndex) {
        nextButton?.classList.add('disabled');
      } else {
        nextButton?.classList.remove('disabled');
      }
    }
    
    // Event listeners para los botones 
    prevButton.addEventListener('click', () => {
      if (!prevButton.classList.contains('disabled') && currentIndex > 0) {
        currentIndex--;
        updateCarousel();
      }
    });
    
    nextButton.addEventListener('click', () => {
      if (!nextButton.classList.contains('disabled') && currentIndex < maxIndex) {
        currentIndex++;
        updateCarousel();
      }
    });
    
    // Inicializar el carrusel
    updateCarousel();
    
    // Ajustar en redimensionamiento de ventana
    let resizeTimeout:any;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        // Recalcular visibleCards basado en el nuevo tamaño de pantalla
        const newVisibleCards = window.innerWidth <= 768 ? 1 : 2;
        const newMaxIndex = Math.ceil(totalCards / newVisibleCards) - 1;
        
        // Ajustar currentIndex si es necesario
        if (currentIndex > newMaxIndex) {
          currentIndex = newMaxIndex;
        }
        
        updateCarousel();
      }, 250);
    });
  });
</script>